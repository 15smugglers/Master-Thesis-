n_time <- length(year_block)/2
edges_gender <- vector("list",n_time)
for(i in 1:n_time){
df <- data.frame()
#female_pvalues <- 0
df <- filter(gender_ago, Date >= as.Date(year_block[(2*i)-1]), Date <= as.Date(year_block[2*i]))
gender_pvalues <- get_pvalues(df,0.95)
edges_gender[[i]] <- get_edges(gender_pvalues,pvalue)
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){edges_gender[[i]] <- apply(edges_gender[[i]],2,as.character)}else{}
# Now test if graph is a DAG
v_female <- c()
for(k in 1:nrow(edges_gender[[i]])){
v_female <- c(v_female,edges_gender[[i]][k,1],edges_gender[[i]][k,2])
}
g1_female <- make_graph(
v_female,
directed = TRUE
)
is_dag(g1_female)
}
edges_gender
}
edges_female_06 <- get_edge_time(years_female,0.6,female_ago)
edges_female_04 <- get_edge_time(years_female,0.4,female_ago)
edges_female_025 <- get_edge_time(years_female,0.25,female_ago)
get_edge_time <- function(year_block,pvalue,gender_ago){
n_time <- length(year_block)/2
edges_gender <- vector("list",n_time)
for(i in 1:n_time){
df <- data.frame()
#female_pvalues <- 0
df <- filter(gender_ago, Date >= as.Date(year_block[(2*i)-1]), Date <= as.Date(year_block[2*i]))
gender_pvalues <- get_pvalues(df,0.95)
edges_gender[[i]] <- get_edges(gender_pvalues,pvalue)
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){edges_gender[[i]] <- apply(edges_gender[[i]],2,as.character)}else{}
# Now test if graph is a DAG
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){
v_female <- c()
for(k in 1:nrow(edges_gender[[i]])){
v_female <- c(v_female,edges_gender[[i]][k,1],edges_gender[[i]][k,2])
}
g1_female <- make_graph(
v_female,
directed = TRUE
)
is_dag(g1_female)
}else{}
}
edges_gender
}
edges_female_06 <- get_edge_time(years_female,0.6,female_ago)
edges_female_04 <- get_edge_time(years_female,0.4,female_ago)
edges_female_025 <- get_edge_time(years_female,0.25,female_ago)
get_edge_time <- function(year_block,pvalue,gender_ago){
n_time <- length(year_block)/2
edges_gender <- vector("list",n_time)
for(i in 1:n_time){
df <- data.frame()
#female_pvalues <- 0
df <- filter(gender_ago, Date >= as.Date(year_block[(2*i)-1]), Date <= as.Date(year_block[2*i]))
gender_pvalues <- get_pvalues(df,0.95)
edges_gender[[i]] <- get_edges(gender_pvalues,pvalue)
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){edges_gender[[i]] <- apply(edges_gender[[i]],2,as.character)}else{DAG <- TRUE}
# Now test if graph is a DAG
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){
v_female <- c()
for(k in 1:nrow(edges_gender[[i]])){
v_female <- c(v_female,edges_gender[[i]][k,1],edges_gender[[i]][k,2])
}
g1_female <- make_graph(
v_female,
directed = TRUE
)
DAG <- is_dag(g1_female)
}else{}
}
List(Edges = edges_gender, DAG=DAG)
}
edges_female_06 <- get_edge_time(years_female,0.6,female_ago)
get_edge_time <- function(year_block,pvalue,gender_ago){
n_time <- length(year_block)/2
edges_gender <- vector("list",n_time)
for(i in 1:n_time){
df <- data.frame()
#female_pvalues <- 0
df <- filter(gender_ago, Date >= as.Date(year_block[(2*i)-1]), Date <= as.Date(year_block[2*i]))
gender_pvalues <- get_pvalues(df,0.95)
edges_gender[[i]] <- get_edges(gender_pvalues,pvalue)
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){edges_gender[[i]] <- apply(edges_gender[[i]],2,as.character)}else{DAG <- TRUE}
# Now test if graph is a DAG
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){
v_female <- c()
for(k in 1:nrow(edges_gender[[i]])){
v_female <- c(v_female,edges_gender[[i]][k,1],edges_gender[[i]][k,2])
}
g1_female <- make_graph(
v_female,
directed = TRUE
)
DAG <- is_dag(g1_female)
}else{}
}
list(Edges = edges_gender, DAG=DAG)
}
edges_female_06 <- get_edge_time(years_female,0.6,female_ago)
edges_female_06$Edges
edges_female_06$DAG
get_edge_time <- function(year_block,pvalue,gender_ago){
n_time <- length(year_block)/2
edges_gender <- vector("list",n_time)
dag <- vector("list",n_time)
for(i in 1:n_time){
df <- data.frame()
#female_pvalues <- 0
df <- filter(gender_ago, Date >= as.Date(year_block[(2*i)-1]), Date <= as.Date(year_block[2*i]))
gender_pvalues <- get_pvalues(df,0.95)
edges_gender[[i]] <- get_edges(gender_pvalues,pvalue)
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){edges_gender[[i]] <- apply(edges_gender[[i]],2,as.character)}else{dag[[i]] <- TRUE}
# Now test if graph is a DAG
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){
v_female <- c()
for(k in 1:nrow(edges_gender[[i]])){
v_female <- c(v_female,edges_gender[[i]][k,1],edges_gender[[i]][k,2])
}
g1_female <- make_graph(
v_female,
directed = TRUE
)
dag[[i]] <- is_dag(g1_female)
}else{}
}
list(Edges = edges_gender, DAG=DAG)
}
edges_female_06 <- get_edge_time(years_female,0.6,female_ago)
list(Edges = edges_gender, DAG=dag)
list(Edges = edges_gender, DAG=dag)
get_edge_time <- function(year_block,pvalue,gender_ago){
n_time <- length(year_block)/2
edges_gender <- vector("list",n_time)
dag <- vector("list",n_time)
for(i in 1:n_time){
df <- data.frame()
#female_pvalues <- 0
df <- filter(gender_ago, Date >= as.Date(year_block[(2*i)-1]), Date <= as.Date(year_block[2*i]))
gender_pvalues <- get_pvalues(df,0.95)
edges_gender[[i]] <- get_edges(gender_pvalues,pvalue)
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){edges_gender[[i]] <- apply(edges_gender[[i]],2,as.character)}else{dag[[i]] <- TRUE}
# Now test if graph is a DAG
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){
v_female <- c()
for(k in 1:nrow(edges_gender[[i]])){
v_female <- c(v_female,edges_gender[[i]][k,1],edges_gender[[i]][k,2])
}
g1_female <- make_graph(
v_female,
directed = TRUE
)
dag[[i]] <- is_dag(g1_female)
}else{}
}
list(Edges = edges_gender, DAG=dag)
}
edges_female_06 <- get_edge_time(years_female,0.6,female_ago)
edges_female_06$DAG
edges_female_04 <- get_edge_time(years_female,0.4,female_ago)
edges_female_025 <- get_edge_time(years_female,0.25,female_ago)
edges_female_01 <- get_edge_time(years_female,0.1,female_ago)
edges_female_005 <- get_edge_time(years_female,0.05,female_ago)
edges_female_001 <- get_edge_time(years_female,0.01,female_ago)
edges_female_0001 <- get_edge_time(years_female,0.001,female_ago)
edges_female_025$DAG
edges_female_025$Edges
years_male <- c("1978-01-01","1982-12-31",
"1983-01-01","1987-12-31",
"1988-01-01","1992-12-31",
"1993-01-01","1997-12-31",
"1998-01-01","2002-12-31",
"2003-01-01","2007-12-31",
"2008-01-01","2011-12-31")
edges_male_04 <- get_edge_time(years_male,0.4,male_ago)
edges_male_025 <- get_edge_time(years_male,0.25,male_ago)
edges_male_01 <- get_edge_time(years_male,0.1,male_ago)
edges_male_005 <- get_edge_time(years_male,0.05,male_ago)
edges_male_001 <- get_edge_time(years_male,0.01,male_ago)
edges_male_0001 <- get_edge_time(years_male,0.001,male_ago)
edges_female_04$Edges
edges_female_04$Edges
years_male <- c("1978-01-01","1982-12-31",
"1983-01-01","1987-12-31",
"1988-01-01","1992-12-31",
"1993-01-01","1997-12-31",
"1998-01-01","2002-12-31",
"2003-01-01","2007-12-31",
"2008-01-01","2011-12-31")
edges_male_04 <- get_edge_time(years_male,0.4,male_ago)
edges_male_04$Edges
edges_male_025 <- get_edge_time(years_male,0.25,male_ago)
edges_male_01 <- get_edge_time(years_male,0.1,male_ago)
edges_male_005 <- get_edge_time(years_male,0.05,male_ago)
edges_male_001 <- get_edge_time(years_male,0.01,male_ago)
edges_male_0001 <- get_edge_time(years_male,0.001,male_ago)
edges_female_04$DAG
edges_female_025$DAG
edges_female_01$DAG
edges_female_04$Edges
edges_female_04$Edges
edges_female_04$Edges
edges_male_04$Edges
# Put that below into a loop that always filters for five years and save the values
years_female <- c("1970-01-01","1974-12-31",
"1975-01-01","1979-12-31",
"1980-01-01","1984-12-31",
"1985-01-01","1989-12-31",
"1990-01-01","1994-12-31",
"1995-01-01","1999-12-31",
"2000-01-01","2004-12-31",
"2005-01-01","2009-12-31",
"2010-01-01","2013-12-31",
"1970-01-01","2013-12-31")
years_male <- c("1978-01-01","1982-12-31",
"1983-01-01","1987-12-31",
"1988-01-01","1992-12-31",
"1993-01-01","1997-12-31",
"1998-01-01","2002-12-31",
"2003-01-01","2007-12-31",
"2008-01-01","2011-12-31",
"1978-01-01","2011-12-31")
get_edge_time <- function(year_block,pvalue,gender_ago){
n_time <- length(year_block)/2
edges_gender <- vector("list",n_time)
dag <- vector("list",n_time)
for(i in 1:n_time){
df <- data.frame()
#female_pvalues <- 0
df <- filter(gender_ago, Date >= as.Date(year_block[(2*i)-1]), Date <= as.Date(year_block[2*i]))
gender_pvalues <- get_pvalues(df,0.95)
edges_gender[[i]] <- get_edges(gender_pvalues,pvalue)
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){edges_gender[[i]] <- apply(edges_gender[[i]],2,as.character)}else{dag[[i]] <- TRUE}
# Now test if graph is a DAG
if(!is.null(dim(edges_gender[[i]])) && nrow(edges_gender[[i]])>0){
v_female <- c()
for(k in 1:nrow(edges_gender[[i]])){
v_female <- c(v_female,edges_gender[[i]][k,1],edges_gender[[i]][k,2])
}
g1_female <- make_graph(
v_female,
directed = TRUE
)
dag[[i]] <- is_dag(g1_female)
}else{}
}
list(Edges = edges_gender, DAG=dag)
}
edges_female_04 <- get_edge_time(years_female,0.4,female_ago)
edges_female_025 <- get_edge_time(years_female,0.25,female_ago)
edges_female_01 <- get_edge_time(years_female,0.1,female_ago)
edges_female_005 <- get_edge_time(years_female,0.05,female_ago)
edges_female_001 <- get_edge_time(years_female,0.01,female_ago)
edges_female_0001 <- get_edge_time(years_female,0.001,female_ago)
edges_male_04 <- get_edge_time(years_male,0.4,male_ago)
edges_male_025 <- get_edge_time(years_male,0.25,male_ago)
edges_male_01 <- get_edge_time(years_male,0.1,male_ago)
edges_male_005 <- get_edge_time(years_male,0.05,male_ago)
edges_male_001 <- get_edge_time(years_male,0.01,male_ago)
edges_male_0001 <- get_edge_time(years_male,0.001,male_ago)
edges_female_04$DAG
edges_male_04$DAG
edges_male_001$DAG
load("/Users/finnmaass/Downloads/Results_Thesis/PL/5 Year Block/Female/BUC/1975_1979/example-FT-a-dir/example-FT.RData")
thetamcmc
B
E
?rmvnorm()
A
C
n
nd
thetamcmc
load("/Users/finnmaass/Downloads/Results_Thesis/PL/5 Year Block/Female/BUC/1985_1989/example-FT-a-dir/example-FT.RData")
B
E
N
NP
Np
n
nd
D
setwd("~/Downloads/Results_Thesis/PL/Entire Data/Female/BUC")
library(coda);library(mvtnorm); library(data.table)
##############get data list###################################
# Setup the note
set.seed(123)
note=list()
#data setup
note$B=1970
note$E=2010
if (note$B>note$E) stop('B before E')
note$doi="Gombe"
note$gender='female'            #'male', 'female
note$selectlists='any'
note$RUNDIR="C:/Users/fimaass/Downloads/PL/Entire Data/BUC/Female"
note$DOWRITE=TRUE            #set to false if you dont want to save along the way - sensible for short runs only.
note$WRITE.SUBSAMPLE=100     #write the state to a file less frequently as this takes time for long runs
note$NEWRUN=TRUE             #set to FALSE if resarting old run
note$savefile='example-FT.RData'  #write MCMC samples to savefile
setwd(note$RUNDIR)
source("get_ranks.R")
cil
load("/Users/finnmaass/Downloads/Results_Thesis/PL/5 Year Block/Female/BUC/1985_1989/example-FT-a-dir/example-FT.RData")
cil
D
load("/Users/finnmaass/Downloads/Results_Thesis/PO/5 Year Block/Female/BUC/1985_1989/example-FT-b-dir/example-FT.RData")
cla
rank
library(SimDesign)
library(MASS)
?mvrnorm
load("/Users/finnmaass/Downloads/Results_Thesis/PL/5 Year Block/Female/BUC/1975_1979/example-FT-a-dir/example-FT.RData")
lambdamcmc
sigmamcmc
sigmamcmc[1]
thetamcmc
thetamcmc[1]
# Simulate a new lambda value
lambda <- mvrnorm(1,thetamcmc[1]*lambdamcmc[,5,1],sigmamcmc[1]*N)
thetamcmc[1]*lambdamcmc[,5,1]
length(thetamcmc[1]*lambdamcmc[,5,1])
N
lambdamcmc[,,1]
lambdamcmc[,5,1]
lambdamcmc[-c(1),5,1]
# Simulate a new lambda value
lambda <- mvrnorm(1,thetamcmc[1]*lambdamcmc[-c(1),5,1],sigmamcmc[1]*N)
lambda
mean(lambda)
betamcmc
betamcmc[,1]
-sum(lambda)
# Simulate a new lambda value
lambda <- mvrnorm(1,thetamcmc[1]*lambdamcmc[-c(1),5,1],sigmamcmc[1]*N) #with one dimension removed
lambda <- c(-sum(lambda),lambda)
lambda
length(lambda)
# Simulate a new lambda value
lambda <- mvrnorm(1,thetamcmc[1]*lambdamcmc[-c(1),5,1],sigmamcmc[1]*N) #with one dimension removed
lambda <- c(-sum(lambda),lambda)
mean(lambda)
# Simulate a new lambda value
set.seed(123)
lambda <- mvrnorm(1,thetamcmc[1]*lambdamcmc[-c(1),5,1],sigmamcmc[1]*N) #with one dimension removed
lambda <- c(-sum(lambda),lambda)
lambda
# Simulate a new lambda value
set.seed(123)
lambda <- mvrnorm(1,thetamcmc[1]*lambdamcmc[-c(1),5,1],sigmamcmc[1]*N) #with one dimension removed
lambda <- c(-sum(lambda),lambda)
lambda
rank
D
betamcmc
# Extrac the beta
beta <- betamcmc[,1]
beta
set.seed(123)
# Simulate the new lambda
lambda <- mvrnorm(1,thetamcmc[1]*lambdamcmc[-c(1),5,1],sigmamcmc[1]*N) #with one dimension removed
lambda <- c(lambda,-sum(lambda))
lambda
mean(lambda)
logpp <- function(dp,lambda,beta,B){
##the log lik contribution of a single list
o <- dp$o
n <- length(o)
t <- dp$time
r <- dp$rank
f <- lambda[o,t-B+1] +beta[r]
ff <- numeric(n)
for(j in 1:n){
ff[j]<- f[j]- log(sum(exp(f[j:n]))) #likelihood for one chimp
}
return(sum(ff))
}
PL_log_lik <- function(D,lambda,beta,B){
logp <- sapply(D,function(x) logpp(dp=x,lambda=lambda,beta=beta,B=B))
return(sum(logp)) #take the sum b.c. we look at the log likelihood!
}
lambdamcmc
lambdamcmc[,,1]
# Recalculate the ranks
D
PL_log_lik(D,lambda,beta,B)
lambdamcmc[,,1]
############### log lik function ###
logpp_pred <- function(dp,lambda,beta,B){
##the log lik contribution of a single list
o <- dp$o
n <- length(o)
t <- dp$time
r <- dp$rank
f <- lambda[o] +beta[r]
ff <- numeric(n)
for(j in 1:n){
ff[j]<- f[j]- log(sum(exp(f[j:n]))) #likelihood for one chimp
}
return(sum(ff))
}
PL_log_lik_pred <- function(D,lambda,beta,B){
logp <- sapply(D,function(x) logpp_pred(dp=x,lambda=lambda,beta=beta,B=B))
return(sum(logp)) #take the sum b.c. we look at the log likelihood!
}
PL_log_lik_pred(D,lambda,beta,B)
PL_log_lik_pred(D,lambda,beta,B)
setwd("~/Downloads/Results_Thesis/Model Comparison")
# Load the MCMC outputs & create data for prediction
library(coda);library(mvtnorm); library(data.table)
# Setup the note
set.seed(123)
note=list()
#data setup
note$B=1978
note$E=1983
source("make_data.R") #Here we also define the restrict functoin and then
source("get_ranks.R")
load("/Users/finnmaass/Downloads/Results_Thesis/PO/Entire Data/Female/BUC/example-FT-a-dir/example-FT.RData")
lkd.for.waic
lkd.for.waic[[1]]
lkd.for.waic[[2]]
lkd.for.waic
lkd.for.waic[1]
lkd.for.waic[-11]
lkd.for.waic[-1][1]
lkd.for.waic[-1][2]
note$MCMC.SWEEPS
length(lkd.for.waic)
note$E
note$E-note$B
note$E-note$B+1
length(lkd.for.waic)
length(lkd.for.waic)/note$E-note$B+1
length(lkd.for.waic)/(note$E-note$B+1)
(length(lkd.for.waic)-1)/(note$E-note$B+1)
unlist(lkd.for.waic)
length(unlist(lkd.for.waic))-1
B <- note$B
E <- note$E
J_done <- note$MCMC.SWEEPS #problems when the sweeps are not finished -> have to find a way to get J!
N <- E-B+1
#lkd.for.waic <- lkd.for.waic[-1] #remove the 0 initalization
J_running <- (length(lkd.for.waic)-1)/N #get the nummber of current sweeps
K <- (length(unlist(lkd.for.waic))-1)/J_running #get the number of observations in this time period
waic.matrix <- matrix(rep(0,J_running*K),K,J_running)
waic.matrix
J_running
lkd.for.waic
lower <- 2+N*(j-1); upper <- 1+N*j
lkd.for.waic[1]
lkd.for.waic[[1]]
# Create the matrix needed to calculate the WAIC
for(j in 1:J_running){
lower <- 2+N*(j-1); upper <- 1+N*j
waic.matrix[,j] <- unlist(lkd.for.waic[lower:upper])
}
waic.matrix[1,]
waic.matrix[1,1:5]
waic.matrix[1,1:6]
waic.matrix[4,1:6]
waic.matrix[4,66]
waic.matrix[4,446]
waic.matrix[4,4556]
exp(-0.0488439)
lkd.for.waic
load("/Users/finnmaass/Downloads/Results_Thesis/PO/5 Year Block/Female/BUC/1970_1974/example-FT-a-dir/example-FT.RData")
lkd.for.waic[2]
lkd.for.waic[6]
lkd.for.waic[7]
lkd.for.waic[2]
lkd.for.waic[12]
cla
sapply(cla,function(x)x$tl)
sapply(cla,function(x)x$tl)==1970
sum(sapply(cla,function(x)x$tl)==1970)
sum(sapply(cla,function(x)x$tl)==1971)
sum(sapply(cla,function(x)x$tl)==1972)
sum(sapply(cla,function(x)x$tl)==1973)
sum(sapply(cla,function(x)x$tl)==1975)
length(lkd.for.waic[3])
lkd.for.waic[1:3]
length(lkd.for.waic[[3]])
length(lkd.for.waic[[4]])
length(lkd.for.waic[[5]])
length(lkd.for.waic[[6]])
sum(sapply(cla,function(x)x$tl)==1974)
length(lkd.for.waic[[5]])
length(lkd.for.waic[[7]])
length(lkd.for.waic[[8]])
lkd.for.waic[[2]]
B <- note$B
E <- note$E
J_done <- note$MCMC.SWEEPS #problems when the sweeps are not finished -> have to find a way to get J!
N <- E-B+1
#lkd.for.waic <- lkd.for.waic[-1] #remove the 0 initalization
J_running <- (length(lkd.for.waic)-1)/N #get the nummber of current sweeps
K <- (length(unlist(lkd.for.waic))-1)/J_running #get the number of observations in this time period
waic.matrix <- matrix(rep(0,J_running*K),K,J_running)
# Create the matrix needed to calculate the WAIC
for(j in 1:J_running){
lower <- 2+N*(j-1); upper <- 1+N*j
waic.matrix[,j] <- unlist(lkd.for.waic[lower:upper])
}
lkd.for.waic[[2]]==waic.matrix[1:57,1]
sum(lkd.for.waic[[2]]==waic.matrix[1:57,1])
sum(lkd.for.waic[[2]]==waic.matrix[1:58,1])
